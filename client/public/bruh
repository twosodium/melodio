
const loadSpotifyIframeAPI = () => {
  return new Promise((resolve, reject) => {
      // Ensure this is set before the script loads
      window.onSpotifyIframeApiReady = (IFrameAPI) => {
          console.log("Iframe API is ready");
          resolve(IFrameAPI);
      };
      if (!iframeScriptLoaded.current) {
              // Create a new script element and append it
          const script = document.createElement('script');
          script.src = 'https://open.spotify.com/embed/iframe-api/v1';
          script.async = true;
          document.body.appendChild(script);
      
          script.onload = () => {
              iframeScriptLoaded.current = true;
              console.log("Spotify Iframe API script loaded.");
          };
          
          script.onerror = () => {
              reject("Failed to load Spotify Iframe API script");
          };
      }
  });
};

const initializeIframe = async () => {
  console.log("initialize iframe");
  try {
    // Wait for the API script to load and become ready
    const IFrameAPI = await loadSpotifyIframeAPI();
    console.log(IFrameAPI);

    const element = document.getElementById('embed-iframe');
    const options = {
      width: '100%',
      height: '100%',
      uri: embedUrl,
    };
    
    const callback = (EmbedController) => {
      console.log("controller ref");
      if (embedUrl) {
        EmbedController.loadUri(embedUrl);  // Load the new track
        EmbedController.play();  // Play the new track
      }
      controllerRef.current = EmbedController;  // Store the new controller instance
    };

    IFrameAPI.createController(element, options, callback);

    console.log(callback);
    
  } catch (error) {
    console.error("Error initializing the iframe:", error);
  }
};

useEffect(() => {
  if (embedUrl) {
    console.log("url changed");
    initializeIframe();
  }
}, [embedUrl]);